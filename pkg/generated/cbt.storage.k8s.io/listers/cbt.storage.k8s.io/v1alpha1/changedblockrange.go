/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ihcsim/cbt-populator/pkg/apis/cbt.storage.k8s.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChangedBlockRangeLister helps list ChangedBlockRanges.
// All objects returned here must be treated as read-only.
type ChangedBlockRangeLister interface {
	// List lists all ChangedBlockRanges in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChangedBlockRange, err error)
	// ChangedBlockRanges returns an object that can list and get ChangedBlockRanges.
	ChangedBlockRanges(namespace string) ChangedBlockRangeNamespaceLister
	ChangedBlockRangeListerExpansion
}

// changedBlockRangeLister implements the ChangedBlockRangeLister interface.
type changedBlockRangeLister struct {
	indexer cache.Indexer
}

// NewChangedBlockRangeLister returns a new ChangedBlockRangeLister.
func NewChangedBlockRangeLister(indexer cache.Indexer) ChangedBlockRangeLister {
	return &changedBlockRangeLister{indexer: indexer}
}

// List lists all ChangedBlockRanges in the indexer.
func (s *changedBlockRangeLister) List(selector labels.Selector) (ret []*v1alpha1.ChangedBlockRange, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChangedBlockRange))
	})
	return ret, err
}

// ChangedBlockRanges returns an object that can list and get ChangedBlockRanges.
func (s *changedBlockRangeLister) ChangedBlockRanges(namespace string) ChangedBlockRangeNamespaceLister {
	return changedBlockRangeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChangedBlockRangeNamespaceLister helps list and get ChangedBlockRanges.
// All objects returned here must be treated as read-only.
type ChangedBlockRangeNamespaceLister interface {
	// List lists all ChangedBlockRanges in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChangedBlockRange, err error)
	// Get retrieves the ChangedBlockRange from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ChangedBlockRange, error)
	ChangedBlockRangeNamespaceListerExpansion
}

// changedBlockRangeNamespaceLister implements the ChangedBlockRangeNamespaceLister
// interface.
type changedBlockRangeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChangedBlockRanges in the indexer for a given namespace.
func (s changedBlockRangeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ChangedBlockRange, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChangedBlockRange))
	})
	return ret, err
}

// Get retrieves the ChangedBlockRange from the indexer for a given namespace and name.
func (s changedBlockRangeNamespaceLister) Get(name string) (*v1alpha1.ChangedBlockRange, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("changedblockrange"), name)
	}
	return obj.(*v1alpha1.ChangedBlockRange), nil
}
