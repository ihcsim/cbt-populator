/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ihcsim/cbt-populator/pkg/apis/cbt/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VolumeSnapshotDeltaLister helps list VolumeSnapshotDeltas.
// All objects returned here must be treated as read-only.
type VolumeSnapshotDeltaLister interface {
	// List lists all VolumeSnapshotDeltas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VolumeSnapshotDelta, err error)
	// VolumeSnapshotDeltas returns an object that can list and get VolumeSnapshotDeltas.
	VolumeSnapshotDeltas(namespace string) VolumeSnapshotDeltaNamespaceLister
	VolumeSnapshotDeltaListerExpansion
}

// volumeSnapshotDeltaLister implements the VolumeSnapshotDeltaLister interface.
type volumeSnapshotDeltaLister struct {
	indexer cache.Indexer
}

// NewVolumeSnapshotDeltaLister returns a new VolumeSnapshotDeltaLister.
func NewVolumeSnapshotDeltaLister(indexer cache.Indexer) VolumeSnapshotDeltaLister {
	return &volumeSnapshotDeltaLister{indexer: indexer}
}

// List lists all VolumeSnapshotDeltas in the indexer.
func (s *volumeSnapshotDeltaLister) List(selector labels.Selector) (ret []*v1alpha1.VolumeSnapshotDelta, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VolumeSnapshotDelta))
	})
	return ret, err
}

// VolumeSnapshotDeltas returns an object that can list and get VolumeSnapshotDeltas.
func (s *volumeSnapshotDeltaLister) VolumeSnapshotDeltas(namespace string) VolumeSnapshotDeltaNamespaceLister {
	return volumeSnapshotDeltaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VolumeSnapshotDeltaNamespaceLister helps list and get VolumeSnapshotDeltas.
// All objects returned here must be treated as read-only.
type VolumeSnapshotDeltaNamespaceLister interface {
	// List lists all VolumeSnapshotDeltas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VolumeSnapshotDelta, err error)
	// Get retrieves the VolumeSnapshotDelta from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VolumeSnapshotDelta, error)
	VolumeSnapshotDeltaNamespaceListerExpansion
}

// volumeSnapshotDeltaNamespaceLister implements the VolumeSnapshotDeltaNamespaceLister
// interface.
type volumeSnapshotDeltaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VolumeSnapshotDeltas in the indexer for a given namespace.
func (s volumeSnapshotDeltaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VolumeSnapshotDelta, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VolumeSnapshotDelta))
	})
	return ret, err
}

// Get retrieves the VolumeSnapshotDelta from the indexer for a given namespace and name.
func (s volumeSnapshotDeltaNamespaceLister) Get(name string) (*v1alpha1.VolumeSnapshotDelta, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("volumesnapshotdelta"), name)
	}
	return obj.(*v1alpha1.VolumeSnapshotDelta), nil
}
